<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2 on Girish varma</title>
    <link>http://geevi.github.io/publication_types/2/</link>
    <description>Recent content in 2 on Girish varma</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Girish Varma</copyright>
    <lastBuildDate>Thu, 10 Dec 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://geevi.github.io/publication_types/2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Characterization of Hard-to-cover CSPs</title>
      <link>http://geevi.github.io/publication/characterization-covering/</link>
      <pubDate>Thu, 10 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://geevi.github.io/publication/characterization-covering/</guid>
      <description>We continue the study of covering complexity of constraint satisfaction problems (CSPs) initiated by Guruswami, Hastad and Sudan [SIAM J. Computing, 31(6):1663&amp;ndash;1686, 2002] and Dinur and Kol [In Proc. 28th IEEE Conference on Computational Complexity, 2013]. The covering number of a CSP instance $\phi$, denoted by ν(Φ) is the smallest number of assignments to the variables of $\phi$, such that each constraint of Φ is satisfied by at least one of the assignments.</description>
    </item>
    
    <item>
      <title>Super-polylogarithmic hypergraph coloring hardness via low-degree long codes</title>
      <link>http://geevi.github.io/publication/hyper-coloring-journal/</link>
      <pubDate>Tue, 22 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://geevi.github.io/publication/hyper-coloring-journal/</guid>
      <description>We prove improved inapproximability results for hypergraph coloring using the low-degree polynomial code (aka, the &amp;lsquo;short code&amp;rsquo; of Barak et. al. [FOCS 2012]) and the techniques proposed by Dinur and Guruswami [FOCS 2013] to incorporate this code for inapproximability results. In particular, we prove quasi-NP-hardness of the following problems on $n$-vertex hyper-graphs:
 Coloring a 2-colorable 8-uniform hypergraph with $2^{2^{\Omega(loglog\sqrt{n})}}$ colors. Coloring a 4-colorable 4-uniform hypergraph with $2^{2^{\Omega(loglog\sqrt{n})}}$ colors. Coloring a 3-colorable 3-uniform hypergraph with $(log n)^{\Omega(1/logloglog n)}$ colors.</description>
    </item>
    
    <item>
      <title>Reducing uniformity in Khot-Saket hypergraph coloring hardness reductions</title>
      <link>http://geevi.github.io/publication/improved-khot-saket/</link>
      <pubDate>Sun, 10 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://geevi.github.io/publication/improved-khot-saket/</guid>
      <description>In a recent result, Khot and Saket [FOCS 2014] proved the quasi-NP-hardness of coloring a 2-colorable 12-uniform hypergraph with 2(logn)Ω(1) colors. This result was proved using a novel outer PCP verifier which had a strong soundness guarantee. In this note, we show that we can reduce the arity of their result by modifying their 12-query inner verifier to an 8-query inner verifier based on the hypergraph coloring hardness reductions of Guruswami et.</description>
    </item>
    
    <item>
      <title> Physarum Can Compute Shortest Paths</title>
      <link>http://geevi.github.io/publication/slime-mold2/</link>
      <pubDate>Wed, 12 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://geevi.github.io/publication/slime-mold2/</guid>
      <description>Physarum polycephalum is a slime mold that is apparently able to solve shortest path problems. A mathematical model has been proposed by Tero et al. (Journal of Theoretical Biology, 244, 2007, pp. 553–564) to describe the feedback mechanism used by the slime mold to adapt its tubular channels while foraging two food sources s0 and s1. We prove that, under this model, the mass of the mold will eventually converge to the shortest path of the network that the mold lies on, independently of the structure of the network or of the initial mass distribution.</description>
    </item>
    
    <item>
      <title>Streaming Algorithms for Language Recognition Problems</title>
      <link>http://geevi.github.io/publication/streaming2/</link>
      <pubDate>Tue, 05 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>http://geevi.github.io/publication/streaming2/</guid>
      <description>We study the complexity of the following problems in the streaming model. Membership testing for DLIN We show that every language in DLIN can be recognised by a randomized one-pass O(logn) space algorithm with inverse polynomial one-sided error, and by a deterministic p-pass O(n/p) space algorithm. We show that these algorithms are optimal.Membership testing for LL(k). For languages generated by LL(k) grammars with a bound of r on the number of nonterminals at any stage in the left-most derivation, we show that membership can be tested by a randomized one-pass O(rlogn) space algorithm with inverse polynomial (in n) one-sided error.</description>
    </item>
    
  </channel>
</rss>