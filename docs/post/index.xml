<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Girish varma</title>
    <link>http://geevi.github.io/post/</link>
    <description>Recent content in Posts on Girish varma</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Girish Varma</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0530</lastBuildDate>
    
	<atom:link href="http://geevi.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hardness of Coloring Problems</title>
      <link>http://geevi.github.io/post/hardness-of-coloring/</link>
      <pubDate>Thu, 25 Dec 2014 00:00:00 +0530</pubDate>
      
      <guid>http://geevi.github.io/post/hardness-of-coloring/</guid>
      <description>This is the third part, of a series of blog posts, on the impossibility of finding efficient algorithms for certain problems.
In the first, we saw that for sudoku and many other puzzles, there is a single explanation for our inability to find polynomial time algorithms. The explanation is that, any one problem (say sudoku) that is NP-Complete, does not have a polynomial time algorithm. This is commonly known as the P $\neq$ NP assumption.</description>
    </item>
    
    <item>
      <title>Approximation and its Limits </title>
      <link>http://geevi.github.io/post/approximation-limits/</link>
      <pubDate>Mon, 22 Dec 2014 00:00:00 +0530</pubDate>
      
      <guid>http://geevi.github.io/post/approximation-limits/</guid>
      <description>In the previous blog post, we saw that a computer as we know it, cannot help in solving many puzzles. But some of these puzzles need to be solved, routinely in real life programs. So should we give up hope? Is there another way out?
One way out, is to relax the conditions that is required of the solutions. For the sudoku puzzle, we might say that, we are happy with solutions with just the rows and columns having all distinct numbers and not the blocks.</description>
    </item>
    
    <item>
      <title>Puzzling Computers</title>
      <link>http://geevi.github.io/post/puzzling-computers/</link>
      <pubDate>Mon, 22 Dec 2014 00:00:00 +0530</pubDate>
      
      <guid>http://geevi.github.io/post/puzzling-computers/</guid>
      <description>Sudoku Above is an instance of the sudoku puzzle. The goal is to fill in numbers from $1$ to $9$ in the blanks such that, every row, column and $3 \times 3$ block has all the $9$ different numbers. Beside is a solution for the puzzle instance and it is easy to verify that the constraints on the rows, columns and sub blocks are satisfied.
Since very few numbers are given, it is difficult to solve.</description>
    </item>
    
  </channel>
</rss>